package com.example.sedes.config;import com.example.sedes.Account.AccountRepository;import com.example.sedes.Account.AccountUserDetailsService;import com.example.sedes.filter.JwtAuthFilter;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configurationpublic class SecurityConfig {    private final AccountRepository accountRepository;    private JwtAuthFilter jwtAuthFilter;    public SecurityConfig(JwtAuthFilter jwtAuthFilter, AccountRepository accountRepository) {        this.jwtAuthFilter = jwtAuthFilter;        this.accountRepository = accountRepository;    }    @Bean    public UserDetailsService userDetailsService() {        return new AccountUserDetailsService(accountRepository);    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    public AuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();        authenticationProvider.setUserDetailsService(userDetailsService());        authenticationProvider.setPasswordEncoder(passwordEncoder());        return authenticationProvider;    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {        return config.getAuthenticationManager();    }    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http            .csrf(csrf -> csrf.disable())            .authorizeHttpRequests((auth) -> auth                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()            )            .authorizeHttpRequests((auth) -> auth                .requestMatchers("/accounts/hello", "/accounts/new", "/accounts/auth").permitAll()                .requestMatchers("/accounts/all", "/accounts/{id}").hasAuthority("ROLE_ADMIN")                .requestMatchers("/accounts/**").authenticated()            )            .sessionManagement((sess) -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))            .authenticationProvider(authenticationProvider())            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }}