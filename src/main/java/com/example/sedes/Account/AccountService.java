package com.example.sedes.Account;import com.example.sedes.Account.DTO.AuthRequest;import com.example.sedes.service.JwtService;import java.util.List;import java.util.Optional;import org.springframework.http.HttpStatus;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.web.server.ResponseStatusException;@Servicepublic class AccountService {    private AccountRepository accountRepository;    private PasswordEncoder passwordEncoder;    private JwtService jwtService;    private AuthenticationManager authenticationManager;    public AccountService(AccountRepository accountRepository, PasswordEncoder passwordEncoder, JwtService jwtService, AuthenticationManager authenticationManager) {        this.accountRepository = accountRepository;        this.passwordEncoder = passwordEncoder;        this.jwtService = jwtService;        this.authenticationManager = authenticationManager;    }    public List<Account> getAccounts() {        return accountRepository.findAll();    }    public Optional<Account> getAccountById(int id) {        return accountRepository.findById(id);    }    public void addAccount(Account account) {        if (accountRepository.existsByUsername(account.getUsername())) {            throw new ResponseStatusException(HttpStatus.CONFLICT, "Username already exists");        }        if (accountRepository.existsByEmail(account.getEmail())) {            throw new ResponseStatusException(HttpStatus.CONFLICT, "Email already exists");        }        account.setPassword(passwordEncoder.encode(account.getPassword()));        accountRepository.save(account);    }    public String authAndGetToken(AuthRequest authRequest) {        try {            Authentication auth = authenticationManager.authenticate(                new UsernamePasswordAuthenticationToken(                    authRequest.getUsername(),                    authRequest.getPassword()                )            );            if (auth.isAuthenticated()) {                return jwtService.generateToken(authRequest.getUsername());            } else {                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Authentication is rejected");            }        } catch (Exception ex) {            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, ex.getMessage());        }    }}