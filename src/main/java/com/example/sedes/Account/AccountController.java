package com.example.sedes.Account;import com.example.sedes.Account.DTO.AuthRequest;import io.swagger.v3.oas.annotations.tags.Tag;import java.util.List;import java.util.Optional;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.server.ResponseStatusException;@RestController@RequestMapping("/accounts")@Tag(name = "Account", description = "Account API")public class AccountController {    private final AccountService accountService;    public AccountController(AccountService accountService) {        this.accountService = accountService;    }    @GetMapping("/all")    public ResponseEntity<List<Account>> getAccounts() {        List<Account> accounts = accountService.getAccounts();        return ResponseEntity.ok(accounts);    }    @GetMapping("/{id}")    public ResponseEntity<Account> getAccountById(@PathVariable int id) {        Optional<Account> accountOptional = accountService.getAccountById(id);        return accountOptional            .map(account -> ResponseEntity.ok(account))            .orElseGet(() -> ResponseEntity.notFound().build());    }    @PostMapping("/new")    public ResponseEntity<String> addAccount(@RequestBody Account account) {        try {            accountService.addAccount(account);            return ResponseEntity.ok("Account added successfully");        } catch (ResponseStatusException ex) {            return ResponseEntity.status(ex.getStatusCode()).body("Account creation failed: " + ex.getReason());        }    }    @PostMapping("/auth")    public ResponseEntity<String> auth(@RequestBody AuthRequest authRequest) {        try {            String jwtToken = accountService.authAndGetToken(authRequest);            return ResponseEntity.ok(jwtToken);        } catch (ResponseStatusException ex) {            return ResponseEntity.status(ex.getStatusCode()).body("Authentication failed: " + ex.getReason());        }    }}