package com.example.sedes.OpenAI;import com.example.sedes.OpenAI.Entity.Sentences;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.server.ResponseStatusException;@RestController@RequestMapping("/open-ai")@Tag(name = "OpenAI", description = "OpenAI API")public class OpenAIController {    private final OpenAIService openAIService;    public OpenAIController(OpenAIService openAIService) {        this.openAIService = openAIService;    }    @PostMapping("/gene-sentence")    public ResponseEntity<String> general(@RequestBody Sentences prompt) {        try {            String result = openAIService.processGeneRequest(prompt.getKorSentence());            return ResponseEntity.ok(result);        } catch (ResponseStatusException e) {            return ResponseEntity.status(e.getStatusCode()).build();        }    }    @PostMapping("/tran-sentence")    public ResponseEntity<String> translate(@RequestBody Sentences prompt) {        try {            String result = openAIService.processTranRequest(prompt.getKorSentence());            return ResponseEntity.ok(result);        } catch (ResponseStatusException e) {            return ResponseEntity.status(e.getStatusCode()).build();        }    }    @PostMapping("/eval-sentence")    public ResponseEntity<String> evaluate(@RequestBody Sentences prompt) {        try {            String result = openAIService.processEvalRequest(prompt.getKorSentence(), prompt.getEngSentence());            return ResponseEntity.ok(result);        } catch (ResponseStatusException e) {            return ResponseEntity.status(e.getStatusCode()).build();        }    }}