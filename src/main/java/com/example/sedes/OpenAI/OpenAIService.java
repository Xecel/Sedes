package com.example.sedes.OpenAI;import com.example.sedes.OpenAI.DTO.ChatRequest;import com.example.sedes.OpenAI.DTO.ChatResponse;import lombok.Data;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpEntity;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.web.client.HttpStatusCodeException;import org.springframework.web.client.RestTemplate;import org.springframework.web.server.ResponseStatusException;@Servicepublic class OpenAIService {    @Value("${openai.model}")    private String MODEL;    @Value("${openai.api.url}")    private String OPEN_AI_API_URL;    @Value("${openai.api.token}")    private String OPEN_AI_API_TOKEN;    @Value("${openai.api.role}")    private String ROLE;    public String processGeneRequest(String korMessage) {        RestTemplate restTemplate = new RestTemplate();        ChatRequest chatRequest = new ChatRequest();        HttpEntity<ChatRequest> entity = chatRequest.makeRequest(MODEL, OPEN_AI_API_TOKEN, ROLE, chatRequest.makeGeneRequest(korMessage));        System.out.println(entity);        return parseAPI(restTemplate, entity);    }    public String processTranRequest(String korMessage) {        RestTemplate restTemplate = new RestTemplate();        ChatRequest chatRequest = new ChatRequest();        HttpEntity<ChatRequest> entity = chatRequest.makeRequest(MODEL, OPEN_AI_API_TOKEN, ROLE, chatRequest.makeTranRequest(korMessage));        return parseAPI(restTemplate, entity);    }    public String processEvalRequest(String korMessage, String engMessage) {        RestTemplate restTemplate = new RestTemplate();        ChatRequest chatRequest = new ChatRequest();        HttpEntity<ChatRequest> entity = chatRequest.makeRequest(MODEL, OPEN_AI_API_TOKEN, ROLE, chatRequest.makeEvalRequest(korMessage, engMessage));        return parseAPI(restTemplate, entity);    }    private String parseAPI(RestTemplate restTemplate, HttpEntity<ChatRequest> entity) {        try {            ResponseEntity<ChatResponse> responseEntity = restTemplate.postForEntity(OPEN_AI_API_URL, entity, ChatResponse.class);            if (responseEntity.getStatusCode() == HttpStatus.OK) {                ChatResponse response = responseEntity.getBody();                return response.resolveFirstContent();            } else {                throw new ResponseStatusException(responseEntity.getStatusCode());            }        } catch (HttpStatusCodeException e) {            throw new ResponseStatusException(e.getStatusCode());        }    }}