package com.example.sedes.service;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import io.jsonwebtoken.io.Decoders;import io.jsonwebtoken.security.Keys;import java.security.Key;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Function;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import org.springframework.security.core.userdetails.UserDetails;@Componentpublic class JwtService {    @Value("${jwt.SecretKey}")    private String SecretKey;    @Value("${jwt.ValidityInSeconds}")    private String ValidityInSeconds;    public Key getSignKey() {        byte[] keyBytes = Decoders.BASE64.decode(SecretKey);        return Keys.hmacShaKeyFor(keyBytes);    }    private Claims extactAllClaims(String token) {        return Jwts.parserBuilder()            .setSigningKey(getSignKey())            .build()            .parseClaimsJws(token)            .getBody();    }    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {        final Claims claims = extactAllClaims(token);        return claimsResolver.apply(claims);    }    public String extractUsername(String token) {        return extractClaim(token, claims -> claims.getSubject());    }    public Date extractExpiration(String token) {        return extractClaim(token, claims -> claims.getExpiration());    }    public Boolean isTokenExpired(String token) {        return extractExpiration(token).before(new Date());    }    public Boolean isValidateToken(String token, UserDetails userDetails) {        final String username = extractUsername(token);        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));    }    public String generateToken(String userName) {        Map<String, Object> claims = new HashMap<>();        return createToken(claims, userName);    }    private String createToken(Map<String, Object> claims, String username) {        long validityInMilliseconds = Long.parseLong(ValidityInSeconds) * 1000;        return Jwts.builder()            .setClaims(claims)            .setSubject(username)            .setIssuedAt(new Date(System.currentTimeMillis()))            .setExpiration(new Date(System.currentTimeMillis() + validityInMilliseconds))            .signWith(getSignKey(), SignatureAlgorithm.HS256)            .compact();    }}